// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	resource "github.com/odpf/entropy/core/resource"
	mock "github.com/stretchr/testify/mock"
)

// ResourceStore is an autogenerated mock type for the Store type
type ResourceStore struct {
	mock.Mock
}

type ResourceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceStore) EXPECT() *ResourceStore_Expecter {
	return &ResourceStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, r, hooks
func (_m *ResourceStore) Create(ctx context.Context, r resource.Resource, hooks ...resource.MutationHook) error {
	_va := make([]interface{}, len(hooks))
	for _i := range hooks {
		_va[_i] = hooks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource, ...resource.MutationHook) error); ok {
		r0 = rf(ctx, r, hooks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ResourceStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - ctx context.Context
//  - r resource.Resource
//  - hooks ...resource.MutationHook
func (_e *ResourceStore_Expecter) Create(ctx interface{}, r interface{}, hooks ...interface{}) *ResourceStore_Create_Call {
	return &ResourceStore_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, r}, hooks...)...)}
}

func (_c *ResourceStore_Create_Call) Run(run func(ctx context.Context, r resource.Resource, hooks ...resource.MutationHook)) *ResourceStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]resource.MutationHook, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(resource.MutationHook)
			}
		}
		run(args[0].(context.Context), args[1].(resource.Resource), variadicArgs...)
	})
	return _c
}

func (_c *ResourceStore_Create_Call) Return(_a0 error) *ResourceStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: ctx, urn, hooks
func (_m *ResourceStore) Delete(ctx context.Context, urn string, hooks ...resource.MutationHook) error {
	_va := make([]interface{}, len(hooks))
	for _i := range hooks {
		_va[_i] = hooks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, urn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...resource.MutationHook) error); ok {
		r0 = rf(ctx, urn, hooks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - urn string
//  - hooks ...resource.MutationHook
func (_e *ResourceStore_Expecter) Delete(ctx interface{}, urn interface{}, hooks ...interface{}) *ResourceStore_Delete_Call {
	return &ResourceStore_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, urn}, hooks...)...)}
}

func (_c *ResourceStore_Delete_Call) Run(run func(ctx context.Context, urn string, hooks ...resource.MutationHook)) *ResourceStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]resource.MutationHook, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(resource.MutationHook)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *ResourceStore_Delete_Call) Return(_a0 error) *ResourceStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetByURN provides a mock function with given fields: ctx, urn
func (_m *ResourceStore) GetByURN(ctx context.Context, urn string) (*resource.Resource, error) {
	ret := _m.Called(ctx, urn)

	var r0 *resource.Resource
	if rf, ok := ret.Get(0).(func(context.Context, string) *resource.Resource); ok {
		r0 = rf(ctx, urn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, urn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceStore_GetByURN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByURN'
type ResourceStore_GetByURN_Call struct {
	*mock.Call
}

// GetByURN is a helper method to define mock.On call
//  - ctx context.Context
//  - urn string
func (_e *ResourceStore_Expecter) GetByURN(ctx interface{}, urn interface{}) *ResourceStore_GetByURN_Call {
	return &ResourceStore_GetByURN_Call{Call: _e.mock.On("GetByURN", ctx, urn)}
}

func (_c *ResourceStore_GetByURN_Call) Run(run func(ctx context.Context, urn string)) *ResourceStore_GetByURN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourceStore_GetByURN_Call) Return(_a0 *resource.Resource, _a1 error) *ResourceStore_GetByURN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *ResourceStore) List(ctx context.Context, filter resource.Filter) ([]resource.Resource, error) {
	ret := _m.Called(ctx, filter)

	var r0 []resource.Resource
	if rf, ok := ret.Get(0).(func(context.Context, resource.Filter) []resource.Resource); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resource.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, resource.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - filter resource.Filter
func (_e *ResourceStore_Expecter) List(ctx interface{}, filter interface{}) *ResourceStore_List_Call {
	return &ResourceStore_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *ResourceStore_List_Call) Run(run func(ctx context.Context, filter resource.Filter)) *ResourceStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.Filter))
	})
	return _c
}

func (_c *ResourceStore_List_Call) Return(_a0 []resource.Resource, _a1 error) *ResourceStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Revisions provides a mock function with given fields: ctx, selector
func (_m *ResourceStore) Revisions(ctx context.Context, selector resource.RevisionsSelector) ([]resource.Revision, error) {
	ret := _m.Called(ctx, selector)

	var r0 []resource.Revision
	if rf, ok := ret.Get(0).(func(context.Context, resource.RevisionsSelector) []resource.Revision); ok {
		r0 = rf(ctx, selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resource.Revision)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, resource.RevisionsSelector) error); ok {
		r1 = rf(ctx, selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceStore_Revisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Revisions'
type ResourceStore_Revisions_Call struct {
	*mock.Call
}

// Revisions is a helper method to define mock.On call
//  - ctx context.Context
//  - selector resource.RevisionsSelector
func (_e *ResourceStore_Expecter) Revisions(ctx interface{}, selector interface{}) *ResourceStore_Revisions_Call {
	return &ResourceStore_Revisions_Call{Call: _e.mock.On("Revisions", ctx, selector)}
}

func (_c *ResourceStore_Revisions_Call) Run(run func(ctx context.Context, selector resource.RevisionsSelector)) *ResourceStore_Revisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.RevisionsSelector))
	})
	return _c
}

func (_c *ResourceStore_Revisions_Call) Return(_a0 []resource.Revision, _a1 error) *ResourceStore_Revisions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: ctx, r, hooks
func (_m *ResourceStore) Update(ctx context.Context, r resource.Resource, hooks ...resource.MutationHook) error {
	_va := make([]interface{}, len(hooks))
	for _i := range hooks {
		_va[_i] = hooks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, r)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource, ...resource.MutationHook) error); ok {
		r0 = rf(ctx, r, hooks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ResourceStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//  - ctx context.Context
//  - r resource.Resource
//  - hooks ...resource.MutationHook
func (_e *ResourceStore_Expecter) Update(ctx interface{}, r interface{}, hooks ...interface{}) *ResourceStore_Update_Call {
	return &ResourceStore_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, r}, hooks...)...)}
}

func (_c *ResourceStore_Update_Call) Run(run func(ctx context.Context, r resource.Resource, hooks ...resource.MutationHook)) *ResourceStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]resource.MutationHook, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(resource.MutationHook)
			}
		}
		run(args[0].(context.Context), args[1].(resource.Resource), variadicArgs...)
	})
	return _c
}

func (_c *ResourceStore_Update_Call) Return(_a0 error) *ResourceStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}
