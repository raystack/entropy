// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	module "github.com/odpf/entropy/core/module"
	mock "github.com/stretchr/testify/mock"

	resource "github.com/odpf/entropy/core/resource"
)

// LoggableModule is an autogenerated mock type for the Loggable type
type LoggableModule struct {
	mock.Mock
}

type LoggableModule_Expecter struct {
	mock *mock.Mock
}

func (_m *LoggableModule) EXPECT() *LoggableModule_Expecter {
	return &LoggableModule_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: ctx, spec, filter
func (_m *LoggableModule) Log(ctx context.Context, spec module.ExpandedResource, filter map[string]string) (<-chan module.LogChunk, error) {
	ret := _m.Called(ctx, spec, filter)

	var r0 <-chan module.LogChunk
	if rf, ok := ret.Get(0).(func(context.Context, module.ExpandedResource, map[string]string) <-chan module.LogChunk); ok {
		r0 = rf(ctx, spec, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan module.LogChunk)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, module.ExpandedResource, map[string]string) error); ok {
		r1 = rf(ctx, spec, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoggableModule_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type LoggableModule_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//  - ctx context.Context
//  - spec module.ExpandedResource
//  - filter map[string]string
func (_e *LoggableModule_Expecter) Log(ctx interface{}, spec interface{}, filter interface{}) *LoggableModule_Log_Call {
	return &LoggableModule_Log_Call{Call: _e.mock.On("Log", ctx, spec, filter)}
}

func (_c *LoggableModule_Log_Call) Run(run func(ctx context.Context, spec module.ExpandedResource, filter map[string]string)) *LoggableModule_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(module.ExpandedResource), args[2].(map[string]string))
	})
	return _c
}

func (_c *LoggableModule_Log_Call) Return(_a0 <-chan module.LogChunk, _a1 error) *LoggableModule_Log_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Plan provides a mock function with given fields: ctx, res, act
func (_m *LoggableModule) Plan(ctx context.Context, res module.ExpandedResource, act module.ActionRequest) (*module.Plan, error) {
	ret := _m.Called(ctx, res, act)

	var r0 *module.Plan
	if rf, ok := ret.Get(0).(func(context.Context, module.ExpandedResource, module.ActionRequest) *module.Plan); ok {
		r0 = rf(ctx, res, act)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*module.Plan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, module.ExpandedResource, module.ActionRequest) error); ok {
		r1 = rf(ctx, res, act)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoggableModule_Plan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Plan'
type LoggableModule_Plan_Call struct {
	*mock.Call
}

// Plan is a helper method to define mock.On call
//  - ctx context.Context
//  - res module.ExpandedResource
//  - act module.ActionRequest
func (_e *LoggableModule_Expecter) Plan(ctx interface{}, res interface{}, act interface{}) *LoggableModule_Plan_Call {
	return &LoggableModule_Plan_Call{Call: _e.mock.On("Plan", ctx, res, act)}
}

func (_c *LoggableModule_Plan_Call) Run(run func(ctx context.Context, res module.ExpandedResource, act module.ActionRequest)) *LoggableModule_Plan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(module.ExpandedResource), args[2].(module.ActionRequest))
	})
	return _c
}

func (_c *LoggableModule_Plan_Call) Return(_a0 *module.Plan, _a1 error) *LoggableModule_Plan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Sync provides a mock function with given fields: ctx, res
func (_m *LoggableModule) Sync(ctx context.Context, res module.ExpandedResource) (*resource.State, error) {
	ret := _m.Called(ctx, res)

	var r0 *resource.State
	if rf, ok := ret.Get(0).(func(context.Context, module.ExpandedResource) *resource.State); ok {
		r0 = rf(ctx, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, module.ExpandedResource) error); ok {
		r1 = rf(ctx, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoggableModule_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type LoggableModule_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//  - ctx context.Context
//  - res module.ExpandedResource
func (_e *LoggableModule_Expecter) Sync(ctx interface{}, res interface{}) *LoggableModule_Sync_Call {
	return &LoggableModule_Sync_Call{Call: _e.mock.On("Sync", ctx, res)}
}

func (_c *LoggableModule_Sync_Call) Run(run func(ctx context.Context, res module.ExpandedResource)) *LoggableModule_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(module.ExpandedResource))
	})
	return _c
}

func (_c *LoggableModule_Sync_Call) Return(_a0 *resource.State, _a1 error) *LoggableModule_Sync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
